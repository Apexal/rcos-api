Project RCOS {
  database_type: 'PostgreSQL' 
  Note: '''
    # RCOS Relational Database
    
    This DB will serve as a single source of truth for all RCOS data.
    
    
    ### Semesters
    Semesters are referenced as RPI does: 4-digit starting year + 2-digit start month
    - 202009 (Fall 2020)
    - 202001 (Spring 2020)
    - 202005 (Summer 2020) *note: there's technically 3 Summer terms: 01, 02, 03*
    
    ### Naming Conventions
    - human-readable identifiers prefer "title" over "name"
    - timestamps end with `_at`
    - ranges end with `_range`
    - dates end with `_date`
    - booleans start with `is_` or `was_`
    - urls end with `_url`
  '''
}

Table semesters {
  semester_id varchar [pk]
  title varchar [not null, note: 'Typically season and year, e.g. "Fall 2020"']
  start_date date [not null]
  end_date date [not null]
  
  indexes {
    (start_date, end_date)
  }
  
  Note: '''
    Dates are from official academic calendar: https://info.rpi.edu/registrar/academic-calendar
    A school year has 3 semesters, Spring, Summer, and Fall. Semester IDs are 4-digit starting year + 2-digit start month, e.g. "202009"
  '''
}

Table users {
  username varchar [pk, note: 'Will be RCS ID unless outside of RPI']
  preferred_name varchar [note: 'Optional preferred first name to use in UIs']
  first_name varchar [not null]
  last_name varchar [not null]
  graduation_year int [note: 'Only set for RPI students']
  is_rpi boolean [default: true, note: 'True if current student or faculty at RPI']
  is_faculty boolean [default: false, note: 'True if faculty at RPI']
  timezone text [not null, default: 'America/New_York', note: 'Timezone from TZ list']
  
  Note: '''
    Users can be students, external mentors, and faculty. Their user details are not dependent on the semester.
  '''
}

enum user_account {
  discord
  mattermost
  github
  gitlab
  bitbucket
}

Table user_accounts {
  username varchar [pk]
  type user_account [pk]
  account_id varchar [not null, note: 'ID/username of account']
  
  Note: 'User accounts such as Discord, GitHub, GitLab, etc.'
}

Table mentor_proposals {
  semester_id varchar [pk]
  username varchar [pk, note: 'Username of mentor to-be']
  reason text [not null, note: 'The reason the user would like to mentor']
  skillset text [not null, note: 'Short details of technologies user can mentor for']
  reviewer_username varchar [note: 'Username of coordinator/faculty who reviewed proposal']
  reviewer_comments text [note: 'Optional comments left by reviewer']
  is_approved boolean [default: false, note: 'True if user was approved to become a mentor for the semester']
  submitted_at timestamp [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'Users interested in mentoring each semester must submit a proposal and be approved.'
}

Table workshop_proposals {
  workshop_proposal_id int [pk, increment]
  semester_id varchar [not null]
  username varchar [not null]
  topic varchar [not null]
  title varchar [not null]
  qualifications varchar [not null]
  first_choice_at timestamp [not null, note: 'First choice for date and time to host workshop']
  second_choice_at timestamp [not null, note: 'Second choice for date and time to host workshop']
  third_datetime_at timestamp [not null, note: 'Third choice for date and time to host workshop']
  reviewer_username varchar [note: 'Username of coordinator/faculty who reviewed proposal']
  reviewer_comments text [note: 'Optional comments left by reviewer']
  is_approved boolean [default: false]
  submitted_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  
  indexes {
    semester_id
    username
  }
    
  Note: 'Users (typically mentors) must submit a proposal to host a workshop and be approved.'
}

Table pay_requests {
  semester_id varchar [pk]
  username varchar [pk]
  reason varchar [not null, note: 'The justification for being paid.']
  is_approved boolean [default: false]
  submitted_at timestamp [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'Users can request to take RCOS for pay INSTEAD of credit and must be approved.'
}

Table projects {
  project_id int [pk, increment]
  title varchar [not null, unique]
  description text [not null]
  languages varchar[] [not null, default: '{}', note: 'List of languages used, all lowercase']
  stack varchar[] [not null, default: '{}', note: 'List of technologies used']
  cover_image_url varchar [note: 'URL to logo image']
  homepage_url varchar [note: 'Optional link to project homepage']
  repository_url varchar [not null]
  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  
  Note: 'Project details are not semester dependent.'
}

Table project_pitches {
  semester_id varchar [pk]
  username varchar [pk]
  existing_project_id int [ref: > projects.project_id, note: 'Only if pitch for existing RCOS project']
  proposed_title varchar [note: 'Null if for existing RCOS project']
  proposed_description text
  proposed_stack varchar
  pitch_slide_url varchar [note: 'Link to 1-slide presentation for pitch (if they are open)']
  proposal_url varchar [note: 'Link to semester project proposal']
  is_looking_for_members boolean [note: 'Open to new members?']
  is_approved boolean [not null, default: false]
  reviewer_username varchar
  reviewer_comments text [note: 'Optional notes from graders']
  submitted_at timestamp [not null, default: `CURRENT_TIMESTAMP`]

  Note: '''
    Represents a project pitch by a member at the start of a semester.
    If the pitch is for an existing project, the title, description, stack
    can be grabbed. Otherwise, when the proposal is approved those fields
    are used to create the actual project.
  '''
}

Table enrollments {
  semester_id varchar [pk, ref: > semesters.semester_id]
  username varchar [pk, ref: > users.username]
  project_id int [ref: > projects.project_id]
  is_project_lead boolean [default: false, note: 'Allows multiple project leads']
  is_coordinator boolean [default: false]
  credits int [not null, note: '0-4 where 0 means just for experience']
  is_for_pay boolean [default: false, note: 'True if taking RCOS for pay']
  mid_year_grade real [note: '0.0-100.0']
  final_grade real [note: '0.0-100.0']
  enrolled_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  
  indexes {
    project_id
    credits
  }
  
  Note: 'An enrollment of a user in RCOS for a specific semester. They might or might not be on a project and might or might not be taking RCOS for credit.'
}

Table small_groups {
  small_group_id int [pk, increment]
  semester_id varchar [not null, ref: > semesters.semester_id]
  title varchar [not null, note: 'The title of the small group.']
  location varchar [note: 'Possible physical location of small group, i.e. building and room']
  
  indexes {
    semester_id
    (semester_id, title) [unique]
  }
  
  Note: 'A small group for a specific semester. There will likely be repeats over semesters only differentiated by semester id.'
}

Table small_group_projects {
  small_group_id int [pk, ref: > small_groups.small_group_id]
  project_id int [pk, ref: > projects.project_id]
}

Table small_group_mentors {
  small_group_id int [pk, ref: > small_groups.small_group_id]
  username varchar [pk, ref: > users.username]
}

Table status_update_submissions {
  status_update_id int [pk]
  username varchar [pk]
  this_week text [not null]
  next_week text [not null]
  blockers text [not null]
  submitted_at timestamp [not null]
  grade real [note: 'Scale from 0-1: did this status update meet the requirements.']
  grader_username varchar [note: 'The mentor/coordinator/faculty member that graded this status_update.']
  grader_comments text [note: 'Given by grader']

  Note: 'A status update submission by a enrolled member.'
}

Table status_updates {
  status_update_id int [pk, increment]
  semester_id varchar [not null, ref: > semesters.semester_id]
  title varchar [note: 'Optional title. If not set, can use open_at date']
  open_date_time timestamp [not null, note: 'When submissions start to be accepted']
  close_date_time timestamp [note: 'When submissions stop being submittable']
}

enum meeting_type {
  large_group
  small_group
  presentations
  bonus_session
  grading
  mentors
  coordinators
  other
}

Table meetings {
  meeting_id int [pk, increment]
  semester_id varchar [not null, ref: > semesters.semester_id]
  meeting_type meeting_type [not null]
  host_username varchar
  is_public boolean [default: true, note: 'True if it appears on the schedule publicly (can be used for drafts)']
  start_date_time timestamp [not null]
  end_date_time timestamp [not null]
  title varchar [note: 'Optional meeting title']
  agenda text [note: 'Optional description of what the meeting will entail']
  recording_url varchar
  presentation_url varchar
  location varchar [note: 'Physical location or URL to join']
  
  indexes {
    semester_id
    (start_date_time, end_date_time)
  }
}

Table meeting_attendances {
  meeting_id int [pk]
  username varchar [pk]
  is_manually_added boolean [default: false, note: 'True if manually added by admin and not user']
  submitted_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
}

Table bonus_attendances {
  bonus_attendance_id int [pk, increment]
  semester_id varchar
  username varchar
  reason varchar [not null]
  submitted_at timestamp [default: `CURRENT_TIMESTAMP`]
  
  indexes {
    (semester_id, username)
  }
  
  Note: 'Bonus attendances from different events'
}

Table presentation_grades {
  semester_id varchar [pk]
  project_id int [pk]
  grader_username varchar [pk]
  grade real [not null]
  submitted_at timestamp [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'Grades for end of semester project presentations. Might need to separate grade into multiple.'
}

enum chat_association_source {
  discord_server
  discord_text_channel
  discord_voice_channel
  discord_category
  discord_role
}

enum chat_association_target {
  project
  small_group
}

Table chat_associations {
  source_type chat_association_source [pk]  
  target_type chat_association_target [pk]
  source_id varchar [pk, Note: 'ID of source, e.g. project id or small group id']
  target_id varchar [not null, Note: 'ID of target on platform, e.g. Discord channel ID']
  
  Note: 'Association of chat platform channel or other entity with a small group or project.'
}

Table final_grade_appeal {
  semester_id varchar [pk]
  username varchar [pk]
  expected_grade varchar [not null]
  reason text [not null]
  is_handled boolean [not null, default: false, note: 'Whether a faculty advisor has handled this appeal yet.']
  submitted_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
}

Ref: "project_pitches".("semester_id", "username") > "enrollments".("semester_id", "username")

Ref: "project_pitches".("semester_id", "reviewer_username") > "enrollments".("semester_id", "username")

Ref: "bonus_attendances".("semester_id", "username") > "enrollments".("semester_id", "username")

Ref: "meetings".("semester_id", "host_username") > "enrollments".("semester_id", "username")

Ref: "final_grade_appeal".("semester_id", "username") > "enrollments".("semester_id", "username")

Ref: "users"."username" < "meeting_attendances"."username"

Ref: "meetings"."meeting_id" < "meeting_attendances"."meeting_id"

Ref: "users"."username" < "meetings"."host_username"

Ref: "mentor_proposals".("semester_id", "username") > "enrollments".("semester_id", "username")

Ref: "workshop_proposals".("semester_id", "username") > "enrollments".("semester_id", "username")

Ref: "pay_requests".("semester_id", "username") > "enrollments".("semester_id", "username")

Ref: "mentor_proposals".("semester_id", "reviewer_username") > "enrollments".("semester_id", "username")

Ref: "workshop_proposals".("semester_id", "reviewer_username") > "enrollments".("semester_id", "username")

Ref: "status_updates"."status_update_id" < "status_update_submissions"."status_update_id"

Ref: "users"."username" < "status_update_submissions"."username"

Ref: "users"."username" < "status_update_submissions"."grader_username"

Ref: "projects"."project_id" < "presentation_grades"."project_id"

Ref: "enrollments".("semester_id", "username") < "presentation_grades".("semester_id", "grader_username")

Ref: "users"."username" < "user_accounts"."username"